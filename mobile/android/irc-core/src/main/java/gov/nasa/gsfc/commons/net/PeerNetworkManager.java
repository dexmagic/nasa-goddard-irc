//=== File Prolog ============================================================
//
//	$Header: /cvs/IRCv6/Dev/source/commons/gov/nasa/gsfc/commons/net/PeerNetworkManager.java,v 1.6 2005/01/09 05:40:21 tames Exp $
//
//	This code was developed by NASA, Goddard Space Flight Center, Code 580
//	for the Instrument Remote Control (IRC) project.
//
//--- Notes ------------------------------------------------------------------
//
//--- Development History  ---------------------------------------------------
//
//	$Log:
//	 1	IRC	   1.0		 12/11/2001 5:33:12 PMTroy Ames
//	$
//
//--- Warning ----------------------------------------------------------------
//	This software is property of the National Aeronautics and Space
//	Administration. Unauthorized use or duplication of this software is
//	strictly prohibited. Authorized users are subject to the following
//	restrictions:
//	*	Neither the author, their corporation, nor NASA is responsible for
//		any consequence of the use of this software.
//	*	The origin of this software must not be misrepresented either by
//		explicit claim or by omission.
//	*	Altered versions of this software must be plainly marked as such.
//	*	This notice may not be removed or altered.
//
//=== End File Prolog ========================================================

package gov.nasa.gsfc.commons.net;

import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;

import net.jxta.discovery.DiscoveryEvent;
import net.jxta.discovery.DiscoveryListener;
import net.jxta.document.MimeMediaType;
import net.jxta.peergroup.PeerGroup;

import gov.nasa.gsfc.commons.net.tasks.CreateGroupTask;
import gov.nasa.gsfc.commons.net.tasks.FindDescriptionsTask;
import gov.nasa.gsfc.commons.net.tasks.InitializeDescriptionPublisherTask;
import gov.nasa.gsfc.commons.net.tasks.JoinGroupTask;
import gov.nasa.gsfc.commons.net.tasks.PublishDescriptionTask;
import gov.nasa.gsfc.commons.net.tasks.StartPeerNetworkTask;
import gov.nasa.gsfc.commons.net.tasks.StopPeerNetworkTask;
import gov.nasa.gsfc.commons.processing.tasks.DefaultTaskManager;
import gov.nasa.gsfc.commons.processing.tasks.TaskManager;

/**
 * The PeerNetworkManager class is a singleton that serves as the bridge to the
 * distributed network discovery and messaging framework between peers.
 * The network implementation uses
 * Jxta for dynamic discovery of other peers and publication of XML
 * descriptions via a Jxta service. The <code>getInstance</code> method returns
 * the instance of the singleton.
 *
 * <P>This code was developed for NASA, Goddard Space Flight Center, Code 580
 * for the Instrument Remote Control (IRC) project.</p>
 *
 * @version	$Date: 2005/01/09 05:40:21 $
 * @author	Troy Ames
**/
public class PeerNetworkManager implements gov.nasa.gsfc.commons.net.DescriptionListener,
											DiscoveryListener
{
	private static final String CLASS_NAME = 
		PeerNetworkManager.class.getName();
	
	private static final Logger sLogger = 
		Logger.getLogger(CLASS_NAME);
	
	// TaskManger for running tasks generated by this singleton
	private TaskManager fTaskManager = new DefaultTaskManager();

	// Peer fields
	private PeerModel fPeerModel = new PeerModelImpl();

	private boolean fStarted = false;

	/**
	 *  Suppress default constructor so class cannot be instantiated by
	 *  constructor except by this class. Use the
	 *  <code>getInstance</code> method to get a reference to this singleton.
	 */
	public PeerNetworkManager()
	{
		start();
	}

	/**
	 *  Close the PeerNetworkManager.
	 */
	public synchronized void close()
	{
			stop();
	}

	/**
	 * Stop the Jxta framework.
	 */
	public void stop()
	{
		if (fStarted)
		{
			try
			{
				fTaskManager.invokeAndWait(new StopPeerNetworkTask(fPeerModel));
				fStarted = false;
			}
			catch (InterruptedException ex)
			{
				if (sLogger.isLoggable(Level.WARNING))
				{
					String message = "Interrupted";
					
					sLogger.logp(Level.WARNING, CLASS_NAME, 
						"stop", message, ex);
				}
			}
		}
	}

	/**
	 * Start the Jxta framework and services.
	 */
	private synchronized void start()
	{
		if (fStarted)
		{
			return;
		}
		try
		{
			fTaskManager.invokeAndWait(new StartPeerNetworkTask(fPeerModel));
			fStarted = true;
		}
		catch (InterruptedException ex)
		{
			if (sLogger.isLoggable(Level.WARNING))
			{
				String message = "Interrupted";
				
				sLogger.logp(Level.WARNING, CLASS_NAME, 
					"start", message, ex);
			}
		}
	}

	/**
	 * By implementing DiscoveryListener we must define this method
	 * to deal with discovery responses.
	 *
	 * @param   event the DiscoveryEvent received
	 *
	 * @see net.jxta.discovery.DiscoveryEvent
	 */
	public void discoveryEvent(DiscoveryEvent event)
	{
		try
		{
			if (sLogger.isLoggable(Level.INFO))
			{
				String message = "Discovery Event received: " + 
					NetUtil.docToString(event.getResponse().
					getDocument(new MimeMediaType("text/plain")));
				
				sLogger.logp(Level.INFO, CLASS_NAME, 
					"discoveryEvent", message);
			}
		}
		catch (Exception ex)
		{
			if (sLogger.isLoggable(Level.WARNING))
			{
				String message = "Discovery Event exception received";
				
				sLogger.logp(Level.WARNING, CLASS_NAME, 
					"discoveryEvent", message, ex);
			}
		}
	}

	/**
	 * Handle a instrument description that was received by this peer.
	 * This method will be called when a requested description is
	 * received.
	 *
	 * @param   event the DescriptionEvent received
	 *
	 * @see DescriptionEvent
	 * @see #findOneDescription(String, String, String, long)
	 */
	public void handleDescriptionEvent(DescriptionEvent event)
	{

	}

	/**
	 * Returns the root Peer Group of the hierarchy.
	 *
	 * @return   the PeerGroup that is the root
	 */
	public PeerGroup getRootPeerGroup()
	{
		return fPeerModel.getRootPeerGroup();
	}

	/**
	 * Returns the Peer Group if this peer is a member of the group.
	 *
	 * @param   name	the name of the PeerGroup
	 * @return  a PeerGroup
	 */
	public PeerGroup getPeerGroup(String name)
	{
		return fPeerModel.getJoinedGroup(name);
	}

	/**
	 * Find several published instrument descriptions that match up to the
	 * specified response limit.
	 * <p>
	 * Parameter <code>groupName</code> must be a fully qualified name.
	 * An example of a fully qualified name is <code>A.B.C</code> if
	 * "." is the group delimiter. In this example
	 * group A is the parent of B. B is a subgroup of A and the parent of
	 * group C. The default root peer group is not specified so A in the example
	 * is a subgroup of the root. If group name is equal to null then the
	 * default root group will be used to search for the description.
	 * </p>
	 * <p>
	 * If peerName is null then
	 * this method will request the specified description published by
	 * any peer in the group. If descName is null then it will request the
	 * default description advertised by the specified peer. If both
	 * peerName and descName are null then this method will request the
	 * default description from all peers in the group. In all cases the
	 * number of requests sent and therefore responses received is limited by
	 * the responseLimit parameter.
	 * </p>
	 * <p>
	 * This request will not expire if <code>timeout</code> is negative.
	 * </p>
	 * <p>
	 * Replies to this request will be published as an ImlCommand to all
	 * subscribers.
	 * </p>
	 *
	 * @param  groupName name of the group to search for the description
	 * @param  peerName  name of peer publishing the description
	 * @param  descName  name of description
	 * @param  timeout  the number of milliseconds to keep trying to
	 *				  find the description
	 * @param  responseLimit  the maximum number of responses from
	 *				  publishers.
	 *
	 * @see gov.nasa.gsfc.irc.datamodel.ImlCommand
	 */
	public void findDescriptions(
		String groupName, String peerName, String descName,
		long timeout, int responseLimit)
	{
		fTaskManager.invokeLater(
			new InitializeDescriptionPublisherTask(groupName, this, fPeerModel));
		fTaskManager.invokeLater(
			new FindDescriptionsTask(
			groupName, peerName, descName, timeout, responseLimit, fPeerModel));
	}

	/**
	 * Publish the description with the given url location in the group.
	 * The availability of a description will be advertised to other peers by
	 * its name. If groupName is null the description will be published in the
	 * root group.
	 *
	 * @param  groupName group to publish the description in, can be null
	 * @param  descName  name of description to publish
	 * @param  location  URL location of the description
	 */
	public void publishDescription(
		String groupName, String descName, URL location)
	{
		if (descName != null && location != null)
		{
			if (sLogger.isLoggable(Level.INFO))
			{
				String message = "In group: " + groupName + " "
					+ descName + " " + location;
				
				sLogger.logp(Level.INFO, CLASS_NAME, 
					"publishDescription", message);
			}

			fTaskManager.invokeLater(
				new InitializeDescriptionPublisherTask(groupName, this, fPeerModel));
			fTaskManager.invokeLater(
				new PublishDescriptionTask(groupName, descName, location, fPeerModel));
		}
		else
		{
			if (sLogger.isLoggable(Level.WARNING))
			{
				String message = "Received a null name or location "
					+ descName + " " + location;
				
				sLogger.logp(Level.WARNING, CLASS_NAME, 
					"publishDescription", message);
			}
		}
	}

	/**
	 * Create a new subgroup in the parent PeerGroup.
	 *
	 * @param  name  the name of the new group
	 * @param  parent the immediate parent of this group
	 * @param  comment a description String to associate with the new group
	 */
	public void createGroup(String name, PeerGroup parent, String comment)
	{
		if (name == null)
		{
			throw new IllegalArgumentException("argument is null");
		}

		fTaskManager.invokeLater(
			new CreateGroupTask(name, parent, comment, fPeerModel));
	}

	/**
	 * Join the group with the given fully qualified group name.
	 * This method will create the group if it does not exist.
	 * An example of a fully qualified name is <code>A.B.C</code> if
	 * "." is the group delimiter <code>GROUP_DELIM</code>. In this example
	 * group A is the parent of B. B is a subgroup of A and the parent of
	 * group C. The default root peer group is not specified so A in the example
	 * is a subgroup of the root.
	 *
	 * @param  qualifiedName  the fully qualified name of the group
	 *
	 * @see PeerModel.GROUP_DELIM
	 */
	public void joinGroup(String qualifiedName)
	{
		if (qualifiedName == null)
		{
			throw new IllegalArgumentException("Group name argument is null");
		}

		// Check if we have already joined this group
		if (!fPeerModel.isJoinedGroup(qualifiedName))
		{
			fTaskManager.invokeLater(
				new JoinGroupTask(qualifiedName, fPeerModel));
		}
	}
}